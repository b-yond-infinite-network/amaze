service: serverless-reminder-app

custom:
  #tableName: 'users-table-${self:provider.stage}'
  # dynamodb:
  #   start:
  #     migrate: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  versionFunctions: false
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource:
  #       - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  # environment:
  #   USERS_TABLE: ${self:custom.tableName}

  vpc:
    securityGroupIds:
      - sg-8a0abaf1
    subnetIds:
      - subnet-8e692ceb
      - subnet-75b09803
      - subnet-e2301ddf
      - subnet-f47c04de
      - subnet-b985c1e1
      - subnet-fb42d0f7

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  dbtest:
    handler: dbfunction.handler
    

  # getUser:
  #   handler: index.handler
  #   events:
  #     - http: 'GET /users/{proxy+}'
  # createUser:
  #   handler: index.handler
  #   events:
  #     - http: 'POST /users'

plugins:
  #- serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

# resources:
#   Resources:
#     UsersDynamoDBTable:
#       Type: 'AWS::DynamoDB::Table'
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: userId
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: userId
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:custom.tableName}